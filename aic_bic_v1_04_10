# Step to print AIC and BIC for each bucket's best SARIMAX model

def print_aic_bic(data):
    p = d = q = range(0, 2)  # Define range of values for SARIMAX parameters
    pdq_combinations = [(x[0], x[1], x[2]) for x in np.array(np.meshgrid(p, d, q)).T.reshape(-1, 3)]

    for bucket in data['Bucket'].unique():
        bucket_data = data[data['Bucket'] == bucket]
        bucket_data.set_index('Month', inplace=True)

        # Split data into training and test (last 12 months for test)
        train_data = bucket_data.iloc[:-12]

        # Find best SARIMAX parameters for 'Total_Amount'
        best_mse_total = np.inf
        best_model = None
        best_params = None

        for param in pdq_combinations:
            try:
                model = SARIMAX(train_data['Total_Amount'], order=param, seasonal_order=(1, 1, 1, 12),
                                enforce_stationarity=False, enforce_invertibility=False)
                model_fit = model.fit(disp=False)
                mse_total = mean_squared_error(bucket_data['Total_Amount'][-12:], model_fit.forecast(steps=12))

                if mse_total < best_mse_total:
                    best_mse_total = mse_total
                    best_model = model_fit
                    best_params = param
            except Exception as e:
                continue

        # Print AIC and BIC for the best model
        print(f'Bucket: {bucket}')
        print(f'Best SARIMAX Params: {best_params}')
        print(f'AIC: {best_model.aic}')
        print(f'BIC: {best_model.bic}\n')

# Call the function to print AIC and BIC for all buckets
print_aic_bic(df_total)