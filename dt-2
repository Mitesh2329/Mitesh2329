import pandas as pd
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Creating a synthetic dataset with 10 features
data = pd.DataFrame({
    'loan_amount': [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500],
    'loan_duration': [12, 18, 24, 30, 36, 42, 48, 54, 60, 66],
    'credit_score': [700, 720, 680, 690, 710, 750, 680, 725, 740, 760],
    'income': [50000, 55000, 48000, 51000, 53000, 60000, 47000, 59000, 62000, 63000],
    'employment_years': [5, 7, 4, 6, 7, 9, 4, 8, 10, 11],
    'age': [25, 30, 35, 40, 45, 50, 55, 60, 65, 70],
    'debt_to_income_ratio': [0.3, 0.25, 0.35, 0.28, 0.32, 0.27, 0.38, 0.29, 0.26, 0.24],
    'num_of_loans': [2, 3, 4, 2, 3, 5, 2, 4, 5, 6],
    'loan_purpose': [1, 0, 1, 1, 0, 1, 1, 0, 0, 1],  # Encoded: 1 = Home, 0 = Car
    'region': [1, 2, 3, 1, 2, 3, 1, 2, 3, 1],  # Encoded: 1 = North, 2 = South, 3 = East
    'loan_default': [0, 1, 0, 0, 1, 0, 1, 0, 0, 1]
})

# Define independent variables (X) and target variable (y)
X = data.drop(columns='loan_default')  # All columns except the target variable
y = data['loan_default']  # Target variable

# Split the data into training and testing sets (70% train, 30% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the DecisionTreeClassifier with Gini criterion and fit to the data
dt_model = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=42)
dt_model.fit(X_train, y_train)

# Visualize the decision tree with feature names and class names
plt.figure(figsize=(12, 8))
plot_tree(dt_model, feature_names=X.columns, class_names=['No Default', 'Default'], filled=True, rounded=True, fontsize=10)
plt.show()

# Feature importance (which features contributed the most to the model)
importances = dt_model.feature_importances_
for feature, importance in zip(X.columns, importances):
    print(f"{feature}: {importance:.4f}")

# Sorting features based on importance
important_features = pd.DataFrame({'Feature': X.columns, 'Importance': importances}).sort_values(by='Importance', ascending=False)
print("\nMost Important Features for the Decision Tree Model:\n", important_features)

# Interpreting the decision tree output
decision_path = dt_model.decision_path(X_test)
node_indicator = decision_path.toarray()

print("\nModel Decision Path Interpretation for each test instance (1 indicates the node was used):")
print(node_indicator)