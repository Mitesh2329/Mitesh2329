import numpy as np
import pandas as pd
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification

# Generate synthetic data
X, y = make_classification(n_samples=1000, n_features=1, n_informative=1, n_redundant=0, n_clusters_per_class=1, weights=[0.99], flip_y=0, random_state=42)

# Define the likelihood function
def log_likelihood(beta, X, y):
    logits = np.dot(X, beta[:-1]) + beta[-1]  # Logistic regression model
    log_likelihood = np.sum(y * np.log(1 / (1 + np.exp(-logits))) + (1 - y) * np.log(1 - 1 / (1 + np.exp(-logits))))
    return -log_likelihood  # Negative for minimization

# Initial guesses for parameters
initial_beta = np.zeros(X.shape[1] + 1)

# Minimize the negative log likelihood
result = minimize(log_likelihood, initial_beta, args=(X, y))

# Print the estimated parameters
print("Estimated parameters:", result.x)