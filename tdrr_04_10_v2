import pandas as pd
import numpy as np
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error

# Step 1: Generate dummy data
months = pd.date_range(start='2019-01', periods=60, freq='M')
buckets = ['0/N', '1 to 2', '2 to 3', '3 to 4', '4 to 5', '5 to 6', '6 to 7', '7 to 8', '8 to 9', '9 to 10']

# Create a dataframe to hold the total amount and pre-mature amount for each bucket
data = []
for bucket in buckets:
    total_amt = np.random.randint(4_500_000, 5_500_000, size=60)
    total_prer = np.random.randint(1_000_000, 2_500_000, size=60)
    df = pd.DataFrame({
        'Month': months,
        'Bucket': bucket,
        'Total_Amount': total_amt,
        'Pre_Mature_Amount': total_prer
    })
    data.append(df)

# Combine all bucket data into one DataFrame
df_total = pd.concat(data)

# Step 2: Data Cleaning
df_total.fillna(method='ffill', inplace=True)

# Step 3: Function to find best SARIMAX combination and forecast
def forecast_sarimax(data, forecast_steps=2):
    best_params = {}
    forecast_df = pd.DataFrame()
    
    p = d = q = range(0, 2)  # Define range of values for SARIMAX parameters
    pdq_combinations = [(x[0], x[1], x[2]) for x in np.array(np.meshgrid(p, d, q)).T.reshape(-1, 3)]
    best_mse_total = np.inf

    for bucket in data['Bucket'].unique():
        bucket_data = data[data['Bucket'] == bucket]
        bucket_data.set_index('Month', inplace=True)

        # Split data into training and test (last 12 months for test)
        train_data = bucket_data.iloc[:-12]
        test_data = bucket_data.iloc[-12:]

        # Try different SARIMAX combinations for 'Total_Amount'
        for param in pdq_combinations:
            try:
                model = SARIMAX(train_data['Total_Amount'], order=param, seasonal_order=(1, 1, 1, 12),
                                enforce_stationarity=False, enforce_invertibility=False)
                model_fit = model.fit(disp=False)
                forecast_total = model_fit.get_forecast(steps=12).predicted_mean
                mse_total = mean_squared_error(test_data['Total_Amount'], forecast_total)

                if mse_total < best_mse_total:
                    best_mse_total = mse_total
                    best_params['Total_Amount'] = param
            except Exception as e:
                continue

        # Fit the best SARIMAX model for 'Total_Amount'
        best_total_model = SARIMAX(train_data['Total_Amount'], order=best_params['Total_Amount'],
                                   seasonal_order=(1, 1, 1, 12), enforce_stationarity=False, enforce_invertibility=False)
        best_total_model_fit = best_total_model.fit(disp=False)

        # Forecast the next 2 months for 'Total_Amount'
        future_total = best_total_model_fit.get_forecast(steps=forecast_steps).predicted_mean

        # Repeat for 'Pre_Mature_Amount' (keeping same best params for simplicity)
        best_prer_model = SARIMAX(train_data['Pre_Mature_Amount'], order=best_params['Total_Amount'],
                                  seasonal_order=(1, 1, 1, 12), enforce_stationarity=False, enforce_invertibility=False)
        best_prer_model_fit = best_prer_model.fit(disp=False)
        
        # Forecast the next 2 months for 'Pre_Mature_Amount'
        future_prer = best_prer_model_fit.get_forecast(steps=forecast_steps).predicted_mean

        # Prepare future months for forecast
        future_months = pd.date_range(start=bucket_data.index[-1], periods=forecast_steps + 1, freq='M')[1:]

        # Combine forecasted results
        forecast_data = pd.DataFrame({
            'Month': future_months,
            'Bucket': bucket,
            'Forecast_Total_Amount': future_total,
            'Forecast_Pre_Mature_Amount': future_prer
        })

        forecast_df = pd.concat([forecast_df, forecast_data])

        # Print validation error
        forecast_validation = best_total_model_fit.get_forecast(steps=12).predicted_mean
        print(f'Validation MSE for Total Amount ({bucket}): {best_mse_total}')

    # Print best SARIMAX parameters used
    print(f'Best SARIMAX parameters for Total Amount: {best_params["Total_Amount"]}')

    return forecast_df

# Step 4: Forecast the next 2 months for each bucket
forecast_df = forecast_sarimax(df_total, forecast_steps=2)

# Step 5: Display the forecasted results in table format
print("\nFinal Forecasted Table:\n")
print(forecast_df.to_string(index=False))