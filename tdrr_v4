import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_squared_error
import itertools

# Step 1: Generate dummy data
months = pd.date_range(start='2019-01', periods=60, freq='M')
buckets = ['0/N', '1 to 2', '2 to 3', '3 to 4', '4 to 5', 
           '5 to 6', '6 to 7', '7 to 8', '8 to 9', '9 to 10']

# Create a dataframe to hold the total amount and pre-mature amount for each bucket
data = []
for bucket in buckets:
    total_amt = np.random.randint(4_500_000, 5_500_000, size=60)
    total_prer = np.random.randint(1_000_000, 2_500_000, size=60)
    df = pd.DataFrame({
        'Month': months,
        'Bucket': bucket,
        'Total_Amount': total_amt,
        'Pre_Mature_Amount': total_prer
    })
    data.append(df)

# Combine all bucket data into one DataFrame
df_total = pd.concat(data)

# Step 2: Data Cleaning
df_total.fillna(method='ffill', inplace=True)

# Step 3: Function to find best model and forecast
def forecast_models(data, forecast_steps=3):
    forecast_df = pd.DataFrame()
    
    for bucket in data['Bucket'].unique():
        bucket_data = data[data['Bucket'] == bucket]
        bucket_data.set_index('Month', inplace=True)

        # Split data into training and test (last 12 months for test)
        train_data = bucket_data.iloc[:-12]
        test_data = bucket_data.iloc[-12:]

        # Initialize variables to store best model details
        best_aic = np.inf
        best_bic = np.inf
        best_model = None
        best_model_name = ''
        
        # Models to evaluate
        models = {
            'SARIMAX': SARIMAX(train_data['Total_Amount'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)),
            'ARIMA': ARIMA(train_data['Total_Amount'], order=(1, 1, 1)),
            'Exponential Smoothing': ExponentialSmoothing(train_data['Total_Amount'], seasonal='add', seasonal_periods=12)
        }

        for model_name, model in models.items():
            try:
                model_fit = model.fit(disp=False)
                aic = model_fit.aic
                bic = model_fit.bic
                
                # Check for best AIC
                if aic < best_aic:
                    best_aic = aic
                    best_model = model_fit
                    best_model_name = model_name

                # Check for best BIC
                if bic < best_bic:
                    best_bic = bic
            
            except Exception as e:
                continue
        
        # Forecast the next specified months
        future_total = best_model.get_forecast(steps=forecast_steps).predicted_mean

        # Forecast Pre_Mature_Amount using the best model
        if best_model_name == 'SARIMAX':
            prer_model = SARIMAX(train_data['Pre_Mature_Amount'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
        elif best_model_name == 'ARIMA':
            prer_model = ARIMA(train_data['Pre_Mature_Amount'], order=(1, 1, 1))
        else:
            prer_model = ExponentialSmoothing(train_data['Pre_Mature_Amount'], seasonal='add', seasonal_periods=12)

        prer_model_fit = prer_model.fit(disp=False)
        future_prer = prer_model_fit.get_forecast(steps=forecast_steps).predicted_mean

        # Prepare future months for forecast
        future_months = pd.date_range(start=bucket_data.index[-1], periods=forecast_steps + 1, freq='M')[1:]

        # Combine forecasted results
        forecast_data = pd.DataFrame({
            'Month': future_months,
            'Bucket': bucket,
            'Forecast_Total_Amount': future_total,
            'Forecast_Pre_Mature_Amount': future_prer
        })

        # Calculate percentage of Pre_Mature_Amount
        forecast_data['Percentage'] = (forecast_data['Forecast_Pre_Mature_Amount'] / train_data['Total_Amount'].iloc[-1]) * 100
        
        forecast_df = pd.concat([forecast_df, forecast_data])
        
        # Print best model details
        print(f"Best Model for {bucket}: {best_model_name} | AIC: {best_aic:.2f} | BIC: {best_bic:.2f}")

        # Visualization
        plt.figure(figsize=(10, 5))
        plt.plot(bucket_data.index, bucket_data['Total_Amount'], label='Total Amount', color='blue')
        plt.plot(bucket_data.index, bucket_data['Pre_Mature_Amount'], label='Pre-Mature Amount', color='orange')
        plt.plot(future_months, future_total, label='Forecast Total Amount', color='green', linestyle='--')
        plt.plot(future_months, future_prer, label='Forecast Pre-Mature Amount', color='red', linestyle='--')
        plt.title(f'Forecast for {bucket}')
        plt.xlabel('Month')
        plt.ylabel('Amount')
        plt.legend()
        plt.show()

    return forecast_df

# Step 4: Forecast the next 3 months for each bucket
forecast_df = forecast_models(df_total, forecast_steps=3)

# Step 5: Display the forecasted results in table format
print("\nFinal Forecasted Table:\n")
print(forecast_df.to_string(index=False))