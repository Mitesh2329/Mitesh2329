# Install necessary packages
!pip install pandas matplotlib statsmodels numpy seaborn

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA

# Set seaborn style for better visualizations
sns.set(style="whitegrid")

# Generate synthetic data
np.random.seed(42)  # For reproducibility

# Parameters for data generation
num_scenarios = 14
entries_per_scenario = 46
dates = pd.date_range(start='2019-01-01', end='2022-12-31', freq='M')  # Monthly data
total_entries = num_scenarios * entries_per_scenario

# Generate balance values using random distribution centered around the median
balance_max = 9.02e+12
balance_min = 9.1e+09
balance_median = 6.25e+11

balances = np.random.uniform(balance_min, balance_max, total_entries)

# Assign scenarios and repeat dates to cover all entries
scenarios = np.tile(np.arange(1, num_scenarios+1), entries_per_scenario)
scenario_dates = np.repeat(dates, num_scenarios)

# Create DataFrame
data = pd.DataFrame({
    'scenario': scenarios[:total_entries],
    'balance': balances[:total_entries],
    'date': scenario_dates[:total_entries]
})

# Convert 'date' to datetime format
data['date'] = pd.to_datetime(data['date'], format='%Y-%m-%d')

# Set 'date' as the index for time series analysis
data.set_index('date', inplace=True)

# Summary Statistics (EDA)
print("Summary Statistics:")
print(data.describe())

# Plot distributions
plt.figure(figsize=(10,6))
sns.histplot(data['balance'], bins=20, kde=True, color='blue')
plt.title('Distribution of Balance Values')
plt.xlabel('Balance')
plt.ylabel('Frequency')
plt.show()

# Boxplot for balance distribution per scenario
plt.figure(figsize=(12,6))
sns.boxplot(x='scenario', y='balance', data=data)
plt.title('Balance Distribution across Scenarios')
plt.xlabel('Scenario')
plt.ylabel('Balance')
plt.show()

# Trends in Balance Over Time for Each Scenario
plt.figure(figsize=(14,8))
for scenario in range(1, num_scenarios + 1):
    plt.plot(data[data['scenario'] == scenario].index, 
             data[data['scenario'] == scenario]['balance'], label=f'Scenario {scenario}')

plt.title('Balance Trends Over Time for Each Scenario')
plt.xlabel('Date')
plt.ylabel('Balance')
plt.legend()
plt.show()

# Take the average of balances by date to get a unified time series (optional step)
balance_data = data.groupby('date')['balance'].mean()

# Plot the generated data (Time Series Plot)
plt.figure(figsize=(10,6))
plt.plot(balance_data, label='Mean Balance over Time')
plt.title("Generated Balance Data over Time")
plt.xlabel('Date')
plt.ylabel('Balance')
plt.legend()
plt.show()

# Function to find the best ARIMA parameters using grid search
def evaluate_arima_model(data, arima_order):
    model = ARIMA(data, order=arima_order)
    model_fit = model.fit()
    return model_fit.aic  # Return AIC for model comparison

# Grid search for ARIMA parameters
p_values = range(0, 6)
d_values = range(0, 2)
q_values = range(0, 6)

best_score, best_cfg = float("inf"), None
for p in p_values:
    for d in d_values:
        for q in q_values:
            try:
                aic = evaluate_arima_model(balance_data, (p, d, q))
                if aic < best_score:
                    best_score, best_cfg = aic, (p, d, q)
                print(f'ARIMA{(p,d,q)} AIC={aic}')
            except:
                continue

print(f'Best ARIMA model: {best_cfg} with AIC={best_score}')

# Fit the best ARIMA model
model = ARIMA(balance_data, order=best_cfg)
model_fit = model.fit()

# Forecast for the next 12 months
forecast = model_fit.forecast(steps=12)

# Display the forecasted values
print(forecast)

# Plot the forecast along with historical data
plt.figure(figsize=(10,6))
plt.plot(balance_data, label='Original Data')
plt.plot(pd.date_range(start=balance_data.index[-1], periods=12, freq='M'),
         forecast, label='Forecast for 2025', linestyle='--', color='red')
plt.title('Forecasted vs Original Balance Data')
plt.xlabel('Date')
plt.ylabel('Balance')
plt.legend()
plt.show()

# Scatter plot of the forecasted values for better clarity
plt.figure(figsize=(10,6))
sns.scatterplot(x=pd.date_range(start=balance_data.index[-1], periods=12, freq='M'),
                y=forecast, color='red', label='Forecasted Values')
plt.title('Forecasted Balance Data for 2025')
plt.xlabel('Date')
plt.ylabel('Balance')
plt.legend()
plt.show()