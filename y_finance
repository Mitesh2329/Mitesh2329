import yfinance as yf
import pandas as pd

# Sample list of tickers for demonstration purposes (add tickers as needed)
tickers = ["RELIANCE.NS", "TCS.NS", "INFY.NS", "HDFCBANK.NS", "ITC.NS"]

# Set up a list to store filtered stocks
filtered_stocks = []

# Loop through each ticker in the list
for ticker_symbol in tickers:
    try:
        stock = yf.Ticker(ticker_symbol)
        info = stock.info  # Get stock information

        # Extract necessary fields
        market_cap = info.get("marketCap", 0)
        pe_ratio = info.get("trailingPE", None)
        industry_pe = info.get("forwardPE", None)  # Forward P/E as a proxy for industry P/E
        plumstead_value = info.get("priceToBook", None)  # Using P/B as a proxy for Plumstead value

        # Apply filters
        if market_cap and 10e7 <= market_cap <= 100e7:  # Market cap between 10-100 crore
            if pe_ratio and pe_ratio < 20:
                if industry_pe and pe_ratio < industry_pe:
                    if plumstead_value and plumstead_value < 0.7:  # P/B as proxy for Plumstead value
                        # Append stock info if criteria are met
                        filtered_stocks.append({
                            'Ticker': ticker_symbol,
                            'Market Cap': market_cap,
                            'P/E Ratio': pe_ratio,
                            'Industry P/E': industry_pe,
                            'Plumstead Value (P/B)': plumstead_value,
                            'Sector': info.get('sector', 'Unknown')  # Retrieve sector information
                        })

    except Exception as e:
        print(f"Error processing {ticker_symbol}: {e}")  # Handle errors (e.g., missing data)

# Convert to DataFrame for readability and display the best undervalued stocks
filtered_df = pd.DataFrame(filtered_stocks)

# Sort by P/E ratio or other metric to identify "best" undervalued stocks
best_stocks = filtered_df.sort_values(by='P/E Ratio').head(10)  # Top 10 undervalued stocks
print(best_stocks)